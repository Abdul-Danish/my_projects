name: release
on:
  push:
    branches:
    - release/*
    - '!master'
    - '!Bugfix'
    - '!Feature'
    - '!develop'
    tags:
    - v*
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Evolve Build Notification
      uses: reediculous456/ms-teams-deploy-card@v1.1.0
      with:
        webhook-uri: ${{ secrets.MSTEAMS_WEBHOOK }}
        github-token: ${{ github.token }}
        environment: None
        timezone: Asia/Kolkata
        card-layout-start: compact
        card-layout-exit: complete
        show-on-start: true
        show-on-exit: true
        custom-facts: |
          - name : "Image Tag"
            value: ${{github.sha}}
          - name: "Quality Gate Status"
            value: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}
          - name : "Reliability"
            value: ${{ env.RELIABILITY }}
          - name : "Security"
            value: ${{ env.SECURITY }}
          - name : "Maintainability"
            value: ${{ env.MAINTAINABILITY }}
          - name : "Duplicate Lines"
            value: ${{ env.DUPLICATE_LINES }}
          - name: "Detailed Quality Report"
            value: "${{ vars.SONAR_HOST }}/project/issues?id=${{ github.event.repository.name }}"
          - name: "Tests passed"
            value: "${{ env.TESTS_PASSED }}"
          - name: "Tests failed"
            value: "${{ env.TESTS_FAILED }}"
          - name: "Detailed Unit Tests report"
            value: "${{ vars.SONAR_HOST }}/component_measures?id=${{ github.event.repository.name }}&metric=tests"
        enable-view-status-action: true
        enable-review-diffs-action: true
        view-status-action-text: View Status
    - name: Checkout
      uses: actions/checkout@v3
    - name: Extract branch name
      shell: bash
      run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
      id: extract_branch
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: '8'
    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ steps.extract_branch.outputs.branch }}-${{
          hashFiles('pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ steps.extract_branch.outputs.branch }}-
          ${{ runner.os }}-maven-
    - name: maven-settings-xml-action
      uses: whelk-io/maven-settings-xml-action@v21
      with:
        repositories: >
          [
            {
              "id": "maven-snapshots",
              "name": "maven-snapshots",
              "url": "${{ vars.M2_REPO_HOST }}/repository/maven-snapshots/",
              "releases": {
                "enabled": "false"
              },
              "snapshots": {
                "enabled": "true"
              }
            },
            {
              "id": "maven-releases",
              "name": "maven-releases",
              "url": "${{ vars.M2_REPO_HOST }}/repository/maven-releases/",
              "releases": {
                "enabled": "true"
              },
              "snapshots": {
                "enabled": "false"
              }
            }
          ]
        servers: >
          [
            {
              "id": "maven-releases",
              "username": "${{secrets.DOCKER_USERNAME}}",
              "password": "${{secrets.DOCKER_PASSWORD}}"
            },
            {
              "id": "maven-snapshots",
              "username": "${{secrets.DOCKER_USERNAME}}",
              "password": "${{secrets.DOCKER_PASSWORD}}"
            }           
          ]
        plugin_repositories: >
          [
            {
              "id": "maven-releases",
              "name": "maven-releases",
              "url": "${{ vars.M2_REPO_HOST }}/repository/maven-snapshots/",
              "releases": {
                "enabled": "true"
              },
              "snapshots": {
                "enabled": "true"
              }
            }
          ]
    - name: Set outputs
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    - name: Build with Maven
      run: mvn clean package -DskipTests -Dtag=${{ steps.vars.outputs.sha_short }}
        -Dplatform.version=dev-${{ steps.vars.outputs.sha_short }}
    - name: Run UnitTest
      run: mvn --batch-mode -Dmaven.test.failure.ignore=true test
    - name: Test Summary
      id: test_summary
      uses: test-summary/action@v2
      with:
        paths: target/surefire-reports/TEST-*.xml
      if: always()
    - name: Print test result
      if: always()
      run: |
        echo "TESTS_PASSED=${{ steps.test_summary.outputs.passed }}" >> $GITHUB_ENV
        echo "TESTS_FAILED=${{ steps.test_summary.outputs.failed }}" >> $GITHUB_ENV
    - name: Report
      uses: dorny/test-reporter@v1
      if: always()
      continue-on-error: true
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
    - name: Setup sonarqube
      uses: warchant/setup-sonar-scanner@v4
    - name: Run sonarqube
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.host.url=${{ vars.SONAR_HOST }} -Dsonar.projectKey=${{ github.event.repository.name }}
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      continue-on-error: true
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST }}
    - name: Qualitygate report
      if: always()
      uses: phwt/sonarqube-quality-gate-action@v1.3.2
      id: quality-gate-check
      with:
        sonar-project-key: ${{ github.event.repository.name }}
        sonar-host-url: ${{ vars.SONAR_HOST }}
        sonar-token: ${{ secrets.SONAR_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: get_status
      id: get_status
      if: always()
      run: |
        echo ${{ steps.quality-gate-check.outputs.project-status }}
        echo '${{ steps.quality-gate-check.outputs.quality-gate-result }}'
        echo '${{ steps.quality-gate-check.outputs.quality-gate-result }}' > test.json
        new_reliability_rating=$(jq '.projectStatus.conditions[] | select(.metricKey == "new_reliability_rating") | .status + "=" + .actualValue+"(" + .comparator +" " + .errorThreshold +")"' test.json)
        new_security_rating=$(jq '.projectStatus.conditions[] | select(.metricKey == "new_security_rating") | .status + "=" + .actualValue+"(" + .comparator +" " + .errorThreshold +")"' test.json)
        new_maintainability_rating=$(jq '.projectStatus.conditions[] | select(.metricKey == "new_maintainability_rating") | .status + "=" + .actualValue+"(" + .comparator +" " + .errorThreshold +")"' test.json)
        new_coverage=$(jq '.projectStatus.conditions[] | select(.metricKey == "new_coverage") | .status + "=" + .actualValue+"(" + .comparator +" " + .errorThreshold +")"' test.json)
        new_duplicated_lines_density=$(jq '.projectStatus.conditions[] | select(.metricKey == "new_duplicated_lines_density") | .status + "=" + .actualValue+"(" + .comparator +" " + .errorThreshold +")"' test.json)
        echo "RELIABILITY=$new_reliability_rating" >> $GITHUB_ENV
        echo "SECURITY=$new_security_rating" >> $GITHUB_ENV
        echo "MAINTAINABILITY=$new_maintainability_rating" >> $GITHUB_ENV
        echo "DUPLICATE_LINES=$new_duplicated_lines_density" >> $GITHUB_ENV
    - name: set defaults
      if: always()
      shell: bash
      run: |
        if [[ $DUPLICATE_LINES == "" ]]; then
          echo "DUPLICATE_LINES=N/A" >> $GITHUB_ENV
        fi
        if [[ $RELIABILITY == "" ]]; then
          echo "RELIABILITY=N/A" >> $GITHUB_ENV
        fi
        if [[ $SECURITY == "" ]]; then
          echo "SECURITY=N/A" >> $GITHUB_ENV
        fi
        if [[ $MAINTAINABILITY == "" ]]; then
          echo "MAINTAINABILITY=N/A" >> $GITHUB_ENV
        fi
    - name: Check changes in pom.xml
      id: changed-pom-file
      uses: tj-actions/changed-files@v36.1.0
      with:
        files: |
          pom.xml
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
    - name: Publish to Registry
      id: publish-image
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: ${{github.repository}}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        registry: ${{ secrets.DOCKER_REGISTRY }}
        tags: ${{ steps.get_version.outputs.VERSION }}
    - name: Delete caches
      if: steps.changed-pom-file.outputs.any_changed == 'true'
      id: Delete-caches
      continue-on-error: true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |-
        gh api  -H "Accept: application/vnd.github+json"  \
        /repos/${{github.repository}}/actions/caches > file.txt
        if [ $(jq .total_count file.txt) != 0 ]; then
          
          jq .actions_caches[].key file.txt | sed -e 's/^"//' -e 's/"$//' |grep ${{ steps.extract_branch.outputs.branch }} > delete_cache
          while IFS= read -r line; do

            printf 'Deleting %s\n' "$line"
            gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{github.repository}}t/actions/caches?key=$line
          done < delete_cache
          rm -rf file delete_cache
        else
         echo "no caches found in the current branch ${{github.repository}}"
        fi
