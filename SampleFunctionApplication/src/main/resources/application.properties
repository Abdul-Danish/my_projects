spring.application.name=SampleFunctionApplication
server.port=7080

## Application Version
version=v1
foundation.api.version=v1
solution.api.version=v1

## Application Build

## Application Documentation

## Application Database

## Service Admin

## java-lib :: tracing
logging.config=classpath:logback.xml
platform.tracing.enabled=${TRACING_ENABLE:false}
platform.tracing.service-name=${TRACING_SERVICE_NAME:datastores-custom}
platform.tracing.sender.host=${TRACING_SERVER_HOST}
platform.tracing.sender.port=${TRACING_SERVER_PORT}
spring.main.allow-circular-references=true
tenant.id=${TENANT_ID}

## java-lib :: util
platform.auth.username=${PLATFORM_USERNAME}
platform.auth.password=${PLATFORM_PASSWORD}
platform.auth.url=${AUTHENTICATION_API_HOST}/api/${foundation.api.version}/auth/login
platform.auth.refresh.url=${AUTHENTICATION_API_HOST}/api/${foundation.api.version}/auth/refresh

## java-lib :: secrets
spring.cloud.vault.enabled=true
spring.cloud.vault.scheme=http
spring.cloud.vault.uri=${VAULT_ADDR:localhost:8200}
spring.cloud.vault.token=${VAULT_TOKEN:root}
spring.cloud.vault.kv.enabled=false
spring.cloud.vault.kv.application-name=${KV_APP_NAME:secret}
vault.encryption.key=${VAULT_ENCRYPTION_KEY:indus_encryption}

## java-lib :: entities
redis.events.lifetime=3600
spring.redis.host=${CACHE_HOST}
spring.redis.port=${CACHE_PORT}

##----------------------------------##
##  Application Feature Properties  ##
##----------------------------------##

spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.bootstrap-servers=${MESSAGING_BOOTSTRAP_URL:localhost:9092}
spring.kafka.consumer.bootstrap-servers=${MESSAGING_BOOTSTRAP_URL:localhost:9092}
spring.kafka.producer.bootstrap-servers=${MESSAGING_BOOTSTRAP_URL:localhost:9092}
spring.kafka.consumer.group-id=groupId
spring.kafka.consumer.auto-offset-reset=latest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.retry.attempts=1
spring.kafka.consumer.retry.interval=10000
spring.kafka.consumer.properties.session.timeout.ms=${MESSAGING_SESSION_TIMEOUT_MS:180000}
spring.kafka.consumer.properties.max.poll.interval.ms=10000

spring.main.allow-bean-definition-overriding=true
# spring.main.allow-circular-references=true
# jwt.secret=javainuse

# bever.user=${PLATFORM_USERNAME:}
# bever.user.password=${PLATFORM_PASSWORD:}
# bever.auth.url=${AUTHENTICATION_API_HOST:}/api/${version}/auth/login
# bever.auth.refresh.url=${AUTHENTICATION_API_HOST:}/api/${version}/auth/refresh
# version=v1
functionservice.username=${FAAS_GATEWAY_USERNAME:}
functionservice.password=${FAAS_GATEWAY_PASSWORD:}
function.gateway.url=${FAAS_GATEWAY_HOST:}
# platform.api.security.matchers=${PLATFORM_API_SECURITY_MATCHERS : /api/${version}/**}
# platform.api.security.get.matchers=${PLATFORM_API_SECURITY_GET_MATCHERS : /api/${version}/users/*/avatar,/api/${version}/avatar/*,/actuator/**}
# platform.api.security.ant.matchers=${PLATFORM_API_SECURITY_ANT_MATCHERS : /api/${version}/auth/login,/api/${version}/auth/refresh,/api/${version}/users/register,/api/${version}/forgotpassword,/api/${version}/notifications,/index.html,/swagger-ui*/**,/api-docs*/**, /favicon.ico, /**/*.jpg}


# vault.encryption.key=mongo
# spring.cloud.vault.scheme=http
# spring.cloud.vault.uri=${VAULT_ADDR:http://localhost:8200}
# spring.cloud.vault.kv.application-name=${KV_APP_NAME:secret}
# spring.cloud.vault.kv.enabled=false
# spring.cloud.vault.enabled=true
# spring.cloud.vault.token=${VAULT_TOKEN:root}
management.health.mongo.enabled=false

secretLatestRef=${SOLUTION_API_HOST}/api/${solution.api.version}/solutions/{0}/secrets/{1}/active
connectorLatestRef=${SOLUTION_API_HOST:http://localhost:8050}/api/${solution.api.version}/solutions/{0}/{1}/{2}
connectorVersionRef=${SOLUTION_API_HOST:http://localhost:8050}/api/${solution.api.version}/solutions/{0}/{1}/{2}/versions/{3}

connector.request=${CONNECTOR_REQUEST:676d3bdfd7706c4aecd109b9.func}
connector.response=${CONNECTOR_RESPONSE:676d3bdfd7706c4aecd109b9.func.response}

#logging.level.org.springframework=DEBUG
logging.level.com.digitaldots=DEBUG